# -*- coding: utf-8 -*-
"""21201068_Anika Bushra_CSE422_12_Assignment03_Fall2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gmPqiKfEFhdHOI6hEhdiuNLOJaHDzT13
"""

#PART 1

f1 = open('D:/input1.txt', 'r')
f2 = open('D:/output1.txt', 'w')
i_player = int(f1.readline())


def mortal_kombat(f1, f2):
    max_d = 5
    b_var = 2
    scorpion = 0
    sub_zero = 0
    r_branch = {}
    c_player = i_player

    def alpha_beta(d, flag, alpha, beta):
        if d == max_d:
            if flag:
                return -1
            else:
                return 1

        if flag:
            max_var = float('-inf')
            for i in range(b_var):
                var = alpha_beta(d + 1, False, alpha, beta)
                max_var = max(max_var, var)
                alpha = max(alpha, var)
                if beta <= alpha:
                    break
            return max_var

        else:
            min_var = float('inf')
            for i in range(b_var):
                var = alpha_beta(d + 1, True, alpha, beta)
                min_var = min(min_var, var)
                beta = min(beta, var)
                if beta <= alpha:
                    break
            return min_var

    for key in range(0, 3):
        var2 = (c_player == 0)
        r_output = alpha_beta(0, var2, float('-inf'), float('inf'))

        if r_output == -1:
            value = 'Scorpion'
        else:
            value = 'Sub-Zero'
        r_branch[key] = value

        if value == 'Scorpion':
            scorpion += 1
        else:
            sub_zero += 1
        c_player = 1 - c_player

    if scorpion > sub_zero:
        winner = 'Scorpion'
    else:
        winner = 'Sub-Zero'

    f2.write(f'Game Winner: {winner}\n')
    f2.write(f'Total Rounds Played: {len(r_branch)}\n')
    for key, value in r_branch.items():
        f2.write(f'Winner of Round {key}: {value}\n')


mortal_kombat(f1, f2)

f1.close()
f2.close()

#PART 2

f1 = open('D:/output.txt', 'w')
f2 = open('D:/input.txt', 'r')
dm_cost = int(f2.readline())

def pacman(f2, f1):
    def alpha_beta(d, flag, alpha, beta):
        if d == 3:
            return cond[d]

        if flag:
            max_var = float('-inf')
            for key, value in branch.items():
                val = alpha_beta(d + 1, False, alpha, beta)
                max_var = max(max_var, val)
                alpha = max(alpha, val)
                if beta <= alpha:
                    break
            return max_var

        else:
            min_var = float('inf')
            for key, value in branch.items():
                val = alpha_beta(d + 1, True, alpha, beta)
                min_var = min(min_var, val)
                beta = min(beta, val)
                if beta <= alpha:
                    break
            return min_var

    cond = {0: 3, 1: 6, 2: 2, 3: 3, 4: 7, 5: 1, 6: 2, 7: 0}
    branch = {0: (0, 1), 1: (2, 3), 2: (4, 5), 3: (6, 7)}

    l_max = max(cond[0], cond[1]) - dm_cost
    r_max = max(cond[4], cond[5]) - dm_cost
    dm_val = max(l_max, r_max)
    ab_val = alpha_beta(0, True, float('-inf'), float('inf'))

    f1.write(f'Minimax value without magic is {ab_val} \n')

    if dm_val > ab_val:
        if l_max > r_max:
            b_dir = 'left'
        else:
            b_dir = 'right'
        f1.write(f'The new minimax value is {dm_val}.\n')
        f1.write(f'Pacman goes {b_dir} and uses dark magic.')

    else:
        f1.write(f'The minimax value is {str(ab_val)}.\n')
        f1.write(f'Pacman does not use dark magic.')


pacman(f2, f1)

f1.close()
f2.close()